@page "/"
@using Microsoft.Data.Sqlite
@using ToDoList.Models
@using MudBlazor

<PageTitle>Home</PageTitle>

<h1>To Do List</h1>

<MudGrid>
    <MudItem xs="3">
        <MudTextField @bind-Value="@itemName" Label="Task Name" Variant="Variant.Outlined"></MudTextField>
    </MudItem>
    <MudItem xs="3">
        <MudDatePicker @bind-Value="@dueDate" Label="Due Date" Variant="Variant.Outlined"></MudDatePicker>
    </MudItem>
    <MudItem xs="1">
        <MudButton OnClick="() => AddData()" Color="Color.Primary">Add Task</MudButton>
    </MudItem>

    <MudItem xs="5"></MudItem>

    <MudItem xs="12">
        <MudText>Filters:</MudText>
    </MudItem>
    <MudItem xs="3">
        <MudDatePicker @bind-Value="@dueDate" Label="Filter By Date" Variant="Variant.Outlined"></MudDatePicker>
    </MudItem>
    <MudItem xs="2">
        <MudButton>Apply Filter</MudButton>
    </MudItem>
    <MudItem xs="3"></MudItem>
    <MudItem xs="2">
        <MudSwitch T="bool" Label="Show Completed Tasks" Color="Color.Primary" ValueChanged="@(() => ToggleCompleted())"/>
    </MudItem>
    <MudItem xs="2">
        <MudButton OnClick="() => MarkSelectedAsComplete()" >Mark Selected as Complete</MudButton>
    </MudItem>
</MudGrid>

<MudDataGrid Items="@listItems" MultiSelection="true" @bind-SelectedItems="selectedItems" Filterable="true" FilterMode="DataGridFilterMode.Simple" SortMode="@SortMode.Single" Groupable="false">
    <Columns>
        <SelectColumn T="ListItem" />
        <PropertyColumn Property="x => x.Id" />
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.DueDate" Title="Due Date" />
        <PropertyColumn Property="x => x.Completed" />
        <TemplateColumn>
            <CellTemplate>
                <MudStack Row>
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="() => SetCompleted(context.Item.Id)">Mark as Completed</MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>


@code{
    public string path = Path.GetFullPath(AppDomain.CurrentDomain.BaseDirectory + $"\\..\\..\\..");

    public bool showCompleted = false;

    public string itemName = "";
    public DateOnly dueDate = DateOnly.FromDateTime(DateTime.Now);
    public List<ListItem> listItems = new List<ListItem>();
    public HashSet<ListItem> selectedItems = new();

    protected override async Task OnInitializedAsync()
    {
        using var connection = new SqliteConnection(@$"Data Source={path}\\tododatabase.db");
        connection.Open();

        var sql = "CREATE TABLE IF NOT EXISTS ToDoList (id INTEGER PRIMARY KEY, name TEXT NOT NULL, duedate DATE NOT NULL, completed BOOL NOT NULL)";

        using var command = new SqliteCommand(sql, connection);
        await command.ExecuteNonQueryAsync();

        await GetData(showCompleted);
    }

    private async Task AddData()
    {
        if (string.IsNullOrEmpty(itemName))
        {
            return;
        }
        var sql = "INSERT INTO ToDoList (name, duedate, completed) VALUES (@itemName, @dueDate, 0)";

        // Open a new database connection
        using var connection = new SqliteConnection(@$"Data Source={path}\\tododatabase.db");
        connection.Open();

        // Bind parameters values
        using var command = new SqliteCommand(sql, connection);

        command.Parameters.AddWithValue("@itemName", itemName);
        command.Parameters.AddWithValue("@dueDate", dueDate);

        // Execute the INSERT statement
        await command.ExecuteNonQueryAsync();

        //Refresh table
        await GetData(showCompleted);
    }

    private async Task GetData(bool getAll)
    {
        listItems.Clear();
        string sql = "";

        if (getAll)
        {
            sql = "SELECT * FROM ToDoList";
        }
        else
        {
            //Show only incomplete tasks
            sql = $"SELECT * FROM ToDoList WHERE Completed = false";
        }

        try
        {
            using var connection = new SqliteConnection(@$"Data Source={path}\\tododatabase.db");
            connection.Open();

            using var command = new SqliteCommand(sql, connection);
            using var reader = await command.ExecuteReaderAsync();

            if (reader.HasRows)
            {
                while (reader.Read())
                {
                    ListItem newItem = new ListItem();

                    newItem.Id = reader.GetInt32(0);
                    newItem.Name = reader.GetString(1);
                    newItem.DueDate = DateOnly.FromDateTime(reader.GetDateTime(2));
                    newItem.Completed = reader.GetBoolean(3);

                    listItems.Add(newItem);
                }
            }
            else
            {
                Console.WriteLine("No items found.");
            }

        }
        catch (SqliteException ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task SetCompleted(int Id)
    {
        var sql = "UPDATE ToDoList SET completed = 1 WHERE id = @id";

        // Open a new database connection
        using var connection = new SqliteConnection(@$"Data Source={path}\\tododatabase.db");
        connection.Open();

        // Bind parameters values
        using var command = new SqliteCommand(sql, connection);

        // command.Parameters.AddWithValue("@completed", 1);
        command.Parameters.AddWithValue("@id", Id);

        // Execute the UPDATE statement
        await command.ExecuteNonQueryAsync();
        //Refresh table
        await GetData(showCompleted);
    }

    private async Task MarkSelectedAsComplete()
    {
        string ids = "";
        foreach (var item in selectedItems)
        {
            ids = ids + "," + item.Id;
        }

        var sql = "UPDATE ToDoList SET completed = 1 WHERE id IN (@ids)";

        // Open a new database connection
        using var connection = new SqliteConnection(@$"Data Source={path}\\tododatabase.db");
        connection.Open();

        // Bind parameters values
        using var command = new SqliteCommand(sql, connection);

        // command.Parameters.AddWithValue("@completed", 1);
        command.Parameters.AddWithValue("@ids", ids);

        // Execute the UPDATE statement
        await command.ExecuteNonQueryAsync();

        //Refresh table
        await GetData(showCompleted);
    }

    private async Task ToggleCompleted()
    {
        showCompleted = !showCompleted;
        await GetData(showCompleted);
    }
}